#!/usr/bin/env bb

(require 'babashka.classpath)
(babashka.classpath/add-classpath "./tools")

(ns bmk.main
  (:require
    [clojure.string     :refer  [trim]]
    [clojure.edn        :refer  [read-string]]
    [bmk.core :refer 
      [ print-lines cmd sh-c psql-interactive 
        exec-wait exec-wait-env
        git-commit-hash iso-timestamp]]
    [bmk.pom :refer [make-pom]]))
;=

;; - - - - - - - - constants - - - - - - - - - - -

(def GROUP      "angara")
(def APPNAME    "gpxtrack")
(def VERSION    (-> "./VERSION" slurp trim))
(def DESCR      "GPX Track backend")
(def URL        "https://github.com/angara/gpxtrack")

(def CONFIG_EDN "../../conf/dev.edn")
(def DEV_RES    "./build/dev")
(def PROD_RES   "./build/prod")
(def BUILD_EDN  (str PROD_RES "/build.edn"))
(def POM_XML    "./pom.xml")

(def UBER_JAR   "./target/gpxtrack.jar")
(def MAIN       "gpt.main")

;; - - - - - - - - command handlers - - - - - - - - - - -

(defn read-dev-edn []
  (-> CONFIG_EDN slurp read-string))

;; - - - - - - - - command handlers - - - - - - - - - - -

(defn cssdev [_]
  (let [publ (str DEV_RES "/public/")]
    (cmd "mkdir" "-p" publ)
    (sh-c (str "cp -r assets/* " publ))
    (cmd "npx" "tailwindcss" "build" "assets/css/styles.css" 
                "-o" (str publ "css/styles.css"))))
;;

; - - - - - - - - - - - - - - - - - - -

(defn nrepl [_]
  (println ["clojure" "-A:dev:nrepl"])
  (exec-wait-env 
    ["clojure" "-A:dev:nrepl"] 
    {:CONFIG_EDN CONFIG_EDN}))

; - - - - - - - - - - - - - - - - - - -

(defn build-edn []
  { :appname APPNAME
    :version VERSION
    :commit     (git-commit-hash)
    :timestamp  (iso-timestamp)})
;-

(defn uberjar [_]
  (println "create uberjar:" UBER_JAR)
  ;; (clean nil)
  (cmd "mkdir" "-p" PROD_RES)
  ;
  (println "write:" BUILD_EDN)
  (->> (build-edn) (spit BUILD_EDN))
  ;
  (println "write:" POM_XML)
  (->> (make-pom GROUP APPNAME VERSION DESCR URL) (spit POM_XML))
  ;
  (exec-wait ["clojure" "-Spom"])
  ;;
  (let [cmd [ "clojure" 
              "-A:depstar:uberjar" 
              "-m" "hf.depstar.uberjar" 
              "--jar" UBER_JAR 
              "--main" MAIN  
              "--compile"]]
    (println "run:" cmd)
    (exec-wait cmd)))

; - - - - - - - - - - - - - - - - - - -

(defn psql [_]
  (let [jdbc-url (-> (read-dev-edn) :gpxtrack :psql :url)]
    (psql-interactive jdbc-url)))
;;

; - - - - - - - - - - - - - - - - - - -

(declare COMMANDS)

(defn help [_]
  (println "\nbmk <command>\n")
  (doseq [c COMMANDS]
    (println "   " (:id c) "-" (:descr c)))
  (println)
  (System/exit 1))
;;

(def COMMANDS
  [
    {:id :help    :handler help     :descr "display help"}
    {:id :nrepl   :handler nrepl    :descr "nrepl with dev config"}
    {:id :psql    :handler psql     :descr "exec psql with dev.edn config parameter"}
    {:id :cssdev  :handler cssdev   :descr "tailwind css processor in dev mode"}
    {:id :uberjar :handler uberjar  :descr "build uberjar"}])
;;

(defn- find-command-handler [cmd]
  (or
    (some #(when (= cmd (:id %)) %) COMMANDS)
    {:handler help}))
;-

;; - - - - - - - - - main - - - - - - - - - -

(defn main [args]
  (let [arg1 (first args)
        cmd  (if (= \: (first arg1))
                (keyword (subs arg1 1))
                (keyword arg1))
        ;
        {f :handler} 
        (find-command-handler cmd)]
    ;
    (print-lines (f args))
    (System/exit 0)))
;;
  
(main *command-line-args*)
  
;;.

; prod_assets:
;         @echo "prod assets"
;         @mkdir -p ${PROD_RES}/public
;         @cp -r assets/* ${PROD_RES}/public

; tailwindcss: export NODE_ENV = production
; tailwindcss:
;         @echo "build css"
;         @npx tailwindcss build assets/css/styles.css -o ${PROD_RES}/public/css/styles.css

; build_js:
;         @npx shadow-cljs release prod

; prodpack: prod_assets build_js tailwindcss
;         @echo "prod: assets, js, css."
